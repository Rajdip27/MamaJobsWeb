// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tactsoft.Service.DbDependencies;

#nullable disable

namespace Tactsoft.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230227184202_alltable")]
    partial class alltable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BusinessDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessTradeLicienceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddressBangla")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddressEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameBanglaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameEnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CompanySizeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactPersonDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("IndustialTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("No")
                        .HasColumnType("bit");

                    b.Property<string>("RLNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ThanaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Yes")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanySizeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("IndustialTypeId");

                    b.HasIndex("ThanaId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.CompanySize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CompanyTotalSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("CompanySizes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyTotalSize = "10 too 100",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DistrictName = "Barisal"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Employment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaofExpertise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("CurrentlyWorking")
                        .HasColumnType("bit");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignationRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Educational")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NTVQF")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneRes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ReadingId")
                        .HasColumnType("bigint");

                    b.Property<long>("RelativeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Responsibilites")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Self")
                        .HasColumnType("bit");

                    b.Property<string>("Skill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SpeakingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("WritingId")
                        .HasColumnType("bigint");

                    b.Property<bool>("job")
                        .HasColumnType("bit");

                    b.Property<bool>("professionalTraining")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ReadingId");

                    b.HasIndex("RelativeId");

                    b.HasIndex("SpeakingId");

                    b.HasIndex("WritingId");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.IndustryType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IndustryTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("IndustryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            IndustryTypeName = "Devlopment"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.JobCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("JobCategoryeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("JobCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            JobCategoryeName = "IT"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.OtherBenfits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BenfitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("OtherBenfits");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BenfitName = "Mobile bil",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PostingJobs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdditionalRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalSalaryinfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Applying")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaOfBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaOfExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Contractual")
                        .HasColumnType("bit");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailAddress")
                        .HasColumnType("bit");

                    b.Property<bool>("Entry")
                        .HasColumnType("bit");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FestivelBonus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Freelance")
                        .HasColumnType("bit");

                    b.Property<bool>("FreshersApply")
                        .HasColumnType("bit");

                    b.Property<bool>("FullTime")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HardCoppy")
                        .HasColumnType("bit");

                    b.Property<long>("IndustryTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Infoemail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InsideBangladesh")
                        .HasColumnType("bit");

                    b.Property<bool>("Internship")
                        .HasColumnType("bit");

                    b.Property<long>("JobCategoryeId")
                        .HasColumnType("bigint");

                    b.Property<string>("JobContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobResponsibillites")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeySellingPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanchFacilitics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mainage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MamajobEmail")
                        .HasColumnType("bit");

                    b.Property<string>("Maxage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaximumSalary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaximumYearofExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Mid")
                        .HasColumnType("bit");

                    b.Property<string>("MinimumSalary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimumYearofExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NA")
                        .HasColumnType("bit");

                    b.Property<string>("OtherEducationQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Others")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OthersBenefitsId")
                        .HasColumnType("bigint");

                    b.Property<bool>("OutsideBangladesh")
                        .HasColumnType("bit");

                    b.Property<bool>("PartTime")
                        .HasColumnType("bit");

                    b.Property<string>("PreferredEducationInstitution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredRetiredArmy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalCertification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ResumeReceivingOptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SalaryReview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialInstructionforjobSeekers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Top")
                        .HasColumnType("bit");

                    b.Property<string>("TradeCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("WalkinInterview")
                        .HasColumnType("bit");

                    b.Property<bool>("WorkatOffice")
                        .HasColumnType("bit");

                    b.Property<bool>("Workathome")
                        .HasColumnType("bit");

                    b.Property<string>("personwithdisability")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryTypeId");

                    b.HasIndex("JobCategoryeId");

                    b.HasIndex("OthersBenefitsId");

                    b.HasIndex("ResumeReceivingOptionId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Reading", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReadingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Readings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ReadingName = "Bangla"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Relative", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RelativeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Relatives");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            RelativeName = "Techer"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ResumeReceivingOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResumeOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ResumeReceivings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ResumeOption = "Apply Online"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ServiceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ServiceTypeName = "Stand-out Listing"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Speaking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SpeakingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Speakings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            SpeakingName = "Bangla"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Thana", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("ThanaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Thanas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DistrictId = 1L,
                            ThanaName = "Porijpuer"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Writing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WritingName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Writings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            WritingName = "Bangla"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tactsoft.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tactsoft.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tactsoft.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Company", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.CompanySize", "CompanySize")
                        .WithMany("Companies")
                        .HasForeignKey("CompanySizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.District", "District")
                        .WithMany("Companies")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.IndustryType", "IndustialType")
                        .WithMany("Companies")
                        .HasForeignKey("IndustialTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Thana", "Thana")
                        .WithMany("Companies")
                        .HasForeignKey("ThanaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanySize");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("IndustialType");

                    b.Navigation("Thana");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.District", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Country", "Countrys")
                        .WithMany("Districts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Countrys");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Employment", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Reading", "Readings")
                        .WithMany("Employments")
                        .HasForeignKey("ReadingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Relative", "Relatives")
                        .WithMany("Employments")
                        .HasForeignKey("RelativeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Speaking", "Speakings")
                        .WithMany("Employments")
                        .HasForeignKey("SpeakingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Writing", "Writings")
                        .WithMany("Employments")
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Readings");

                    b.Navigation("Relatives");

                    b.Navigation("Speakings");

                    b.Navigation("Writings");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.PostingJobs", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.IndustryType", "IndustryType")
                        .WithMany("PostingJobs")
                        .HasForeignKey("IndustryTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.JobCategory", "JobCategory")
                        .WithMany("PostingJobs")
                        .HasForeignKey("JobCategoryeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.OtherBenfits", "OtherBenfit")
                        .WithMany("PostingJobs")
                        .HasForeignKey("OthersBenefitsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.ResumeReceivingOption", "ResumeReceivingOption")
                        .WithMany("PostingJobs")
                        .HasForeignKey("ResumeReceivingOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.ServiceType", "ServiceType")
                        .WithMany("PostingJobs")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IndustryType");

                    b.Navigation("JobCategory");

                    b.Navigation("OtherBenfit");

                    b.Navigation("ResumeReceivingOption");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Thana", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.District", "District")
                        .WithMany("Thanas")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.CompanySize", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Country", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.District", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Thanas");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.IndustryType", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.JobCategory", b =>
                {
                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.OtherBenfits", b =>
                {
                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Reading", b =>
                {
                    b.Navigation("Employments");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Relative", b =>
                {
                    b.Navigation("Employments");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ResumeReceivingOption", b =>
                {
                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ServiceType", b =>
                {
                    b.Navigation("PostingJobs");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Speaking", b =>
                {
                    b.Navigation("Employments");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Thana", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Writing", b =>
                {
                    b.Navigation("Employments");
                });
#pragma warning restore 612, 618
        }
    }
}
